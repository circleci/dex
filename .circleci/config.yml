version: 2
jobs:
  checkout_code:
    docker:
      - image: circleci/golang:1.8
    working_directory: /go/src/github.com/coreos/dex
    steps:
      - checkout
      - run: make
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - /go/src/github.com/coreos/dex

  unit_tests:
    docker:
      - image: circleci/golang:1.8
      - image: circleci/postgres:9.4.12-alpine
    working_directory: /go/src/github.com/coreos/dex
    environment:
      TEST_RESULTS: /tmp/test-results
      DEX_POSTGRES_DATABASE: postgres
      DEX_POSTGRES_USER: postgres
      DEX_POSTGRES_HOST: localhost
      DEX_LDAP_TESTS: 1
      DEBIAN_FRONTEND: noninteractive
    steps:
      - run: sudo -E apt-get install -y --force-yes slapd time ldap-utils
      - run:
          name: Start LDAP
          command: sudo /etc/init.d/slapd stop
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - run: go get -u github.com/golang/lint/golint
      - run: make testall

  build_binary:
    docker:
      - image: circleci/golang:1.8
    working_directory: /go/src/github.com/coreos/dex
    steps:
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Build dex binary
          command: |
            make release-binary
            mkdir -p _output/bin/dex && cp /go/bin/dex _output/bin/dex
      - save_cache:
          key: v1-binary-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - /go/src/github.com/coreos/dex/_output/bin

  deploy_image:
    docker:
      - image: docker:17.05.0-ce
    working_directory: /go/src/github.com/coreos/dex
    steps:
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - v1-binary-{{ .Environment.CIRCLE_SHA1 }}
      - setup_remote_docker
      - deploy:
          name: Deploy dex Docker image
          command: /bin/bash -e scripts/circle-deploy

workflows:
  version: 2

  build_test:
    jobs:
      - checkout_code
      - unit_tests:
          requires:
            - checkout_code
      - build_binary:
          requires:
            - checkout_code
      - deploy_image:
          # filters:
          #   branches:
          #     only: master
          requires:
            - unit_tests
            - build_binary
